1. Testing for Client Side URL Redirect 
This vulnerability occurs when an application accepts untrusted input that contains an URL value without sanitizing it. 
By modifying untrusted URL input to a malicious site, an attacker may successfully launch a phishing scam and steal user credentials. 
How to Test :
? Spider target site
 ? Filter sitemap by status code such as 3xx [Redirection]
 ? Analysis results , modify and scan 

2. Testing for clickjacking:
How to Test 
? Intercept proxy and analyze header (X-Frame-Option) 
if the header dosent have the x-Frame-Option header so the app may be vulnerable to clickjacking attackes

3.Test for Cross Origin Resource Sharing:
Cross Origin Resource Sharing or CORS is a:
 mechanism that enables a web browser to perform “crossdomain” requests using the XMLHttpRequest L2 API in a controlled manner 
How to Test 
? Origin & Access-Control-Allow-Origin: insecure configuration as ‘*’ wildcard as value of the Access-Control-Allow-Origin (all domains are allowed)
 ? Access-Control-Request-Method & Access-Control-Allow-Method (must have in response header by the server to describe the methods the clients are allowed to use)
 ? Access-Control-Request-Header & Access-Control-Allow-Headers: determine which header can be used to perform a cross-origin request
 ? Access-Control-Allow-Credential: this header as part of preflight request indicates that the final request can include user credential
 ? Input validation
THREE ATTACK SCENARIOS:
a) Exploiting misconfigured wildcard (*) in CORS Headers:
when you send the request and the response is with the Access-Control-Allow-Origin header setting to *.
so we modified the REQUEST Origin from victim domain to attacker domain and if we get legitimate response:
We created our domain called https://testing.aaa.com, and embed it with exploit code to steal the confidential information form the vulnerable application.
 When victims open https://testing.aaa.com in the browser, it retrieves the sensitive information and sends to the attacker’s server.
b) Trusting Pre-domain Wildcard as Origin: 
Another common misconfiguration is allowing information sharing with domain names that are partly validated.
Consider if a developer had configured CORS to validate the “Origin header” URL, with the white listed domain as just “requester.com”.
 Now, when the attacker crafts the REQUEST as below:
"Origin: attackerrequoster.com" and the unassuming server would respond with "200 OK"
we will see a valid Access-control-Allow-Origin header response with the attacker domain
The reason this happens is a possible backend badly configured validation .
This can be exploited the same way we did for the first misconfiguration.

4.Testing for Spoofable Client IP address:
If an application trusts an HTTP request header like X-Forwarded-For to accurately specify the remote IP address of the connecting client,
 then malicious clients can spoof their IP address. 
**HTTP request headers such as X-Forwarded-For, True-Client-IP, and X-Real-IP are not a robust foundation on which to build any security measures, such as access controls.
 Any such measures should be replaced with more secure alternatives that are not vulnerable to spoofing.

